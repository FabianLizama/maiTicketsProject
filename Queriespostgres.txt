create table if not exists ClientPriority (
	id_clientPriority serial primary key,
	id_externalClient int,
	id_internalClient int,
	clientPriority_name varchar,
	foreign key(id_externalClient) references Externalclient(id_externalClient),
	foreign key(id_internalClient) references Internalclient(id_internalClient)
);

create table if not exists Externalclient (
	id_externalClient serial primary key,
	id_clientPriority int not null,
	id_ticket int not null,
	clientPriority_name varchar,
	foreign key(id_clientPriority) references ClientPriority(id_clientPriority),
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists Internalclient (
	id_internalClient serial primary key,
	id_clientPriority int not null,
	id_ticket int not null,
	clientPriority_name varchar,
	foreign key(id_clientPriority) references ClientPriority(id_clientPriority),
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists Academicunit (
	id_academicunit serial primary key,
	id_analyzer int not null,
	id_leadership int not null,
	foreign key(id_analyzer) references Analyzer(id_analyzer),
	foreign key(id_leadership) references Leadership(id_leadership)
);

create table if not exists Analyzer (
	id_analyzer serial primary key,
	id_academicunit int not null,
	id_leadership int not null,
	foreign key(id_academicunit) references Academicunit(id_academicunit),
	foreign key(id_leadership) references Leadership(id_leadership)
);

create table if not exists Leadership (
	id_leadership serial primary key,
	id_analyzer int not null,
	id_academicunit int not null,
	foreign key(id_analyzer) references Analyzer(id_analyzer),
	foreign key(id_academicunit) references Academicunit(id_academicunit)
);

create table if not exists Ticket (
	id_ticket serial primary key,
	ticket_creation Date,
	ticket_limit Date,
	description Varchar,
	id_ticketCategory int,
	id_ticketrating int,
	id_ticketPriority int,
	id_ticketState int,
	id_ticketComentary int,
	id_ticketDocument int,
	id_ticketHistory int,
	id_ticketReport int,
	foreign key(id_ticketCategory) references TicketCategory(id_ticketCategory),
	foreign key(id_ticketrating) references Ticketrating(id_ticketrating),
	foreign key(id_ticketPriority) references TicketPriority(id_ticketPriority),
	foreign key(id_ticketState) references TicketState(id_ticketState),
	foreign key(id_ticketComentary) references TicketComentary(id_ticketComentary),
	foreign key(id_ticketDocument) references TicketDocument(id_ticketDocument),
	foreign key(id_ticketHistory) references TicketHistory(id_ticketHistory),
	foreign key(id_ticketReport) references TicketReport(id_ticketReport)
);

create table if not exists TicketCategory (
	id_ticketCategory serial primary key,
	id_ticket int not null,
	Category_name varchar,
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists TicketComentary (
	id_ticketComentary serial primary key,
	id_ticket int not null,
	Comentary varchar,
	creation_Comentary_date Date,
	creation_Comentary_hour Time,
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists TicketDocument (
	id_ticketDocument serial primary key,
	id_ticket int not null,
	Document_description varchar,
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists TicketHistory (
	id_ticketHistory serial primary key,
	id_ticket int not null,
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists TicketPriority (
	id_ticketPriority serial primary key,
	id_ticket int not null,
	Priority_level int,
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists Ticketrating (
	id_ticketrating serial primary key,
	id_ticket int not null,
	rating int,
	rating_description varchar,
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists TicketReport (
	id_ticketReport serial primary key,
	id_ticket int not null,
	ticket_answer varchar,
	answer_date Date,
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists TicketState (
	id_ticketState serial primary key,
	id_ticket int not null,
	State_name varchar,
	foreign key(id_ticket) references Ticket(id_ticket)
);

create table if not exists User_info (
	id_user_info serial primary key,
	firstname varchar,
	lastname_p varchar,
	lastname_m varchar,
	rut int,
	mail varchar,
	password varchar,
	birthdate Date
);

